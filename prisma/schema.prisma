generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ThemeStatus {
  PUBLISHED
  UNPUBLISHED
}

model User {
  id         String     @id @default(uuid())
  avatar_url String?
  created_at DateTime   @default(now())
  email      String?    @unique
  github_id  Int        @unique
  session    Session[]
  updated_at DateTime   @updatedAt
  username   String?
  roles      UserRole[]
  theme      String     @default("system")
}

model Role {
  id        String     @id @default(uuid())
  name      String     @unique
  userRoles UserRole[]
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Session {
  id            Int      @id @default(autoincrement())
  user_id       String?
  user          User?    @relation(fields: [user_id], references: [id])
  access_token  String?  @unique
  session_token String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  ip            String?
  country       String?

  @@index([user_id])
}

model ShowGuest {
  id           String      @id @default(uuid())
  showId       String
  guestId      String
  Show         Show        @relation(fields: [showId], references: [id])
  Guest        Guest       @relation(fields: [guestId], references: [id])
  Transcript   Transcript? @relation(fields: [transcriptId], references: [id])
  transcriptId String?

  @@unique([showId, guestId])
}

model Guest {
  id        String       @id @default(uuid())
  name      String
  name_slug String       @unique
  twitter   String?      @unique
  github    String?      @unique
  social    SocialLink[]
  url       String?
  shows     ShowGuest[]

  @@index([name])
}

model SocialLink {
  id       String @id @default(uuid())
  link     String
  guest    Guest  @relation(fields: [guest_id], references: [id])
  guest_id String

  @@unique([link, guest_id])
  @@index([guest_id])
}

model Show {
  id         String       @id @default(uuid())
  number     Int          @unique
  title      String       @db.Text
  date       DateTime
  url        String
  show_notes String       @db.Text
  hash       String       @unique
  slug       String
  md_file    String       @unique
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  guests     ShowGuest[] // Relation to joining model
  Transcript Transcript[]

  @@index([number, date], name: "idx_show_number_date") // Define composite index
  @@index([number]) // Define composite index
}

model Transcript {
  id         String                @id @default(uuid())
  show       Show                  @relation(fields: [show_id], references: [id])
  show_id    String
  utterances TranscriptUtterance[]
  ShowGuest  ShowGuest[]
}

model TranscriptUtterance {
  id               String                    @id @default(uuid())
  start            Float
  end              Float
  confidence       Float
  channel          Int
  transcript_value String
  words            TranscriptUtteranceWord[]
  speaker          Int
  transcript       Transcript                @relation(fields: [transcriptId], references: [id])
  transcriptId     String
}

model TranscriptUtteranceWord {
  id                 String              @id @default(uuid())
  word               String
  start              Float
  end                Float
  confidence         Float
  speaker            Int
  speaker_confidence Float
  punctuated_word    String
  utterance          TranscriptUtterance @relation(fields: [utteranceId], references: [id])
  utteranceId        String
}
